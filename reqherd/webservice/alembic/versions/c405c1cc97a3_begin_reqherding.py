"""Begin reqherding

Revision ID: c405c1cc97a3
Revises: 
Create Date: 2021-12-18 22:33:29.640060

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "c405c1cc97a3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "system_requirement",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("definition", sa.Unicode(length=1000), nullable=False),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.Column("doc_prefix", sa.Unicode(length=10), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sqlite_autoincrement=True,
    )
    op.create_index(
        op.f("ix_system_requirement_id"), "system_requirement", ["id"], unique=False
    )
    op.execute(
        "create trigger system_requirement_after_update "
        "after update on system_requirement "
        "begin "
        "update system_requirement set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.execute(
        "create trigger system_requirement_after_insert "
        "after insert on system_requirement "
        "begin "
        "update system_requirement set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.create_table(
        "hardware_requirement",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("definition", sa.Unicode(length=1000), nullable=False),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.Column("doc_prefix", sa.Unicode(length=10), nullable=False),
        sa.Column("system_requirement_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["system_requirement_id"],
            ["system_requirement.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sqlite_autoincrement=True,
    )
    op.create_index(
        op.f("ix_hardware_requirement_id"), "hardware_requirement", ["id"], unique=False
    )
    op.execute(
        "create trigger hardware_requirement_after_update "
        "after update on hardware_requirement "
        "begin "
        "update hardware_requirement set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.execute(
        "create trigger hardware_requirement_after_insert "
        "after insert on hardware_requirement "
        "begin "
        "update hardware_requirement set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.create_table(
        "software_requirement",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("definition", sa.Unicode(length=1000), nullable=False),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.Column("doc_prefix", sa.Unicode(length=10), nullable=False),
        sa.Column("system_requirement_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["system_requirement_id"],
            ["system_requirement.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sqlite_autoincrement=True,
    )
    op.create_index(
        op.f("ix_software_requirement_id"), "software_requirement", ["id"], unique=False
    )
    op.execute(
        "create trigger software_requirement_after_update "
        "after update on software_requirement "
        "begin "
        "update software_requirement set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.execute(
        "create trigger software_requirement_after_insert "
        "after insert on software_requirement "
        "begin "
        "update software_requirement set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.create_table(
        "hardware_design_element",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("definition", sa.Unicode(length=1000), nullable=False),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.Column("doc_prefix", sa.Unicode(length=10), nullable=False),
        sa.Column("hardware_requirement_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["hardware_requirement_id"],
            ["hardware_requirement.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sqlite_autoincrement=True,
    )
    op.create_index(
        op.f("ix_hardware_design_element_id"),
        "hardware_design_element",
        ["id"],
        unique=False,
    )
    op.execute(
        "create trigger hardware_design_element_after_update "
        "after update on hardware_design_element "
        "begin "
        "update hardware_design_element set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.execute(
        "create trigger hardware_design_element_after_insert "
        "after insert on hardware_design_element "
        "begin "
        "update hardware_design_element set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.create_table(
        "software_design_element",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("definition", sa.Unicode(length=1000), nullable=False),
        sa.Column("modified_date", sa.DateTime(), nullable=True),
        sa.Column("doc_prefix", sa.Unicode(length=10), nullable=False),
        sa.Column("software_requirement_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["software_requirement_id"],
            ["software_requirement.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sqlite_autoincrement=True,
    )
    op.create_index(
        op.f("ix_software_design_element_id"),
        "software_design_element",
        ["id"],
        unique=False,
    )
    op.execute(
        "create trigger software_design_element_after_update "
        "after update on software_design_element "
        "begin "
        "update software_design_element set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    op.execute(
        "create trigger software_design_element_after_insert "
        "after insert on software_design_element "
        "begin "
        "update software_design_element set modified_date = datetime('now') WHERE id = NEW.id;"
        "end; "
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_software_design_element_id"), table_name="software_design_element"
    )
    op.drop_table("software_design_element")
    op.drop_index(
        op.f("ix_hardware_design_element_id"), table_name="hardware_design_element"
    )
    op.drop_table("hardware_design_element")
    op.drop_index(op.f("ix_software_requirement_id"), table_name="software_requirement")
    op.drop_table("software_requirement")
    op.drop_index(op.f("ix_hardware_requirement_id"), table_name="hardware_requirement")
    op.drop_table("hardware_requirement")
    op.drop_index(op.f("ix_system_requirement_id"), table_name="system_requirement")
    op.drop_table("system_requirement")
    # ### end Alembic commands ###
